require("dotenv").config();
const express = require("express");
const path = require("path");
const { Pool } = require("pg");
const bcrypt = require("bcryptjs");
const session = require("express-session");
const nodemailer = require("nodemailer");
const crypto = require("crypto");
const multer = require("multer");
const pgSession = require("connect-pg-simple")(session);
const { S3Client, PutObjectCommand } = require("@aws-sdk/client-s3");
const sharp = require("sharp");
const cookieParser = require("cookie-parser");
const { createServer } = require('http');
const { Server } = require("socket.io");
const si = require('systeminformation');
const i18n = require("i18n");

const csv = require('csv-parser');
const { Readable } = require('stream');

const app = express();
const httpServer = createServer(app);
const io = new Server(httpServer);

// --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø i18n --- // <-- –î–û–î–ê–ù–û
i18n.configure({
    locales: ['uk', 'en'],
    directory: path.join(__dirname, 'locales'),
    defaultLocale: 'uk',
    cookie: 'lang',
    objectNotation: true,
});


const upload = multer({
    storage: multer.memoryStorage(),
    limits: { fileSize: 5 * 1024 * 1024 },
});

app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(express.static(path.join(__dirname, "public")));
app.use(cookieParser());
app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "views"));



// --- –ú–Ü–î–õ–í–ï–† –î–õ–Ø i18n --- // <-- –î–û–î–ê–ù–û
app.use(i18n.init);

// 3. –î–æ–¥–∞—î–º–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –º—ñ–¥–ª–≤–µ—Ä
app.use((req, res, next) => {
    console.log(`\n--- –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç: ${req.method} ${req.path} ---`);
    console.log(`[–î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê] Cookie 'lang', —â–æ –ø—Ä–∏–π—à–æ–≤ –≤—ñ–¥ –±—Ä–∞—É–∑–µ—Ä–∞:`, req.cookies.lang);
    console.log(`[–î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê] –ú–æ–≤–∞, –≤–∏–∑–Ω–∞—á–µ–Ω–∞ i18n (req.getLocale()):`, req.getLocale());
    res.locals.__ = res.__;
    res.locals.lang = req.getLocale(); // –ü–µ—Ä–µ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –º–æ–≤—É –≤ —à–∞–±–ª–æ–Ω–∏
    next();
});

app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "views"));


const pool = new Pool({
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_DATABASE,
    password: process.env.DB_PASSWORD,
    port: process.env.DB_PORT,
    ssl: {
        rejectUnauthorized: false
    }
});
app.use(session({
    store: new pgSession({
        pool: pool, 
        tableName: 'user_sessions', 
        createTableIfMissing: true 
    }),
    secret: process.env.SESSION_SECRET || "your_secret_key",
    resave: false,
    saveUninitialized: false,
    cookie: {
        maxAge: 7 * 24 * 60 * 60 * 1000, // 7 –¥–Ω—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
        secure: false, // –Ø–∫—â–æ HTTPS, –ø–æ—Å—Ç–∞–≤—Ç–µ true
        httpOnly: true
    }
}));

// –î–æ–¥–∞–π—Ç–µ —Ü–µ–π –º–∞—Ä—à—Ä—É—Ç —É –≤–∞—à server.js

app.post('/api/admin/import', upload.single('csvFile'), async (req, res) => {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!req.session.user || req.session.user.role !== 'admin') {
        return res.status(403).send('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ');
    }

    const { tableName } = req.body;
    const file = req.file;

    if (!file) {
        return res.status(400).send('–§–∞–π–ª –Ω–µ –±—É–ª–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.');
    }

    if (!['sensors', 'sensor_readings'].includes(tableName)) {
        return res.status(400).send('–ù–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º–∞ –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ.');
    }

    const results = [];
    const stream = Readable.from(file.buffer).pipe(csv());
    
    stream.on('data', (data) => results.push(data));
    
    stream.on('end', async () => {
        if (results.length === 0) {
            return res.status(400).send('CSV —Ñ–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –º–∞—î –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.');
        }

        const client = await pool.connect();
        try {
            await client.query('BEGIN');

            for (const row of results) {
                // –û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö (–ø—Ä–∏–∫–ª–∞–¥: –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö —Ä—è–¥–∫—ñ–≤ –Ω–∞ null)
                for (const key in row) {
                    if (row[key] === '') {
                        row[key] = null;
                    }
                }

                const columns = Object.keys(row).join(', ');
                const values = Object.values(row);
                const placeholders = values.map((_, i) => `$${i + 1}`).join(', ');
                
                const query = `INSERT INTO ${tableName} (${columns}) VALUES (${placeholders})`;
                await client.query(query, values);
            }

            await client.query('COMMIT');
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –ø—Ä–æ —É—Å–ø—ñ—Ö
            req.session.message = { type: 'success', text: `Successfully imported ${results.length} rows into ${tableName}` };
            res.redirect('/admin');

        } catch (err) {
            await client.query('ROLLBACK');
            console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É CSV:', err);
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            req.session.message = { type: 'error', text: `Error importing data: ${err.message}` };
            res.redirect('/admin');
        } finally {
            client.release();
        }
    });

    stream.on('error', (err) => {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É CSV:', err);
        req.session.message = { type: 'error', text: 'Failed to parse CSV file.' };
        res.redirect('/admin');
    });
});
const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
        user: process.env.TESTMAIL_SENDER,
        pass: process.env.TESTMAIL_API_KEY
    }
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
pool.query('SELECT NOW()', (err, res) => {
    if (err) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', err);
    } else {
        console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', res.rows[0]);
    }
});

// --- –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–º—ñ–Ω–∏ –º–æ–≤–∏ --- // <-- –î–û–î–ê–ù–û

app.get('/lang/:lang', (req, res) => {
    const { lang } = req.params;
    console.log(`[–î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê] –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –∑–º—ñ–Ω—É –º–æ–≤–∏ –Ω–∞: ${lang}`);
    if (['uk', 'en'].includes(lang)) {
        res.cookie('lang', lang, { maxAge: 900000, httpOnly: true });
        console.log(`[–î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê] Cookie 'lang' –±—É–ª–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: ${lang}`);
    } else {
        console.log(`[–î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê] –ù–µ–≤—ñ—Ä–Ω–∞ –º–æ–≤–∞: ${lang}. Cookie –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.`);
    }
    const referer = req.header('Referer') || '/';
    res.redirect(referer);
});
// –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
app.get("/", (req, res) => {
    console.log("[–î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê] –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏. –ü–æ—Ç–æ—á–Ω–∞ –º–æ–≤–∞:", res.locals.lang);
    try {
        if (!req.session.user && req.cookies.user) {
            req.session.user = JSON.parse(req.cookies.user);
        }
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–æ—Ä—É cookie –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
        res.clearCookie("user");
        req.session.user = null;
    }
    res.render("front/index", { title: "–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞", user: req.session.user });
});

app.get("/login", (req, res) => {
    const redirectUrl = req.query.redirect || "/";
    res.render("front/login", { message: req.session.message || "", redirect: redirectUrl });
    req.session.message = ""; // –û—á–∏—â–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
});

app.get("/system", (req, res) => {
    if (!req.session.user && req.cookies.user) {
        req.session.user = JSON.parse(req.cookies.user);
    }
    res.render("system/system", { title: "C–∏—Å—Ç–µ–º–∞", user: req.session.user });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ "–ü—Ä–æ –Ω–∞—Å"
app.get("/about-us", (req, res) => {
    res.render("front/About_Us", { title: "–ü—Ä–æ –Ω–∞—Å", user: req.session.user });
});

app.get("/map", (req, res) => {
    res.render("front/map", { 
        title: "–ö–∞—Ä—Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É",
        user: req.session.user || null 
    });
});

app.get("/about-system", (req, res) => {
    res.render("front/about-system", { title: "–ø—Ä–æ —Å–∏—Å—Ç–µ–º—É", user: req.session.user });
});

app.get("/contact", (req, res) => {
    res.render("front/contact", { 
        title: "–ö–æ–Ω—Ç–∞–∫—Ç–∏", 
        user: req.session.user || null, 
        message: null 
    });
});

app.get("/get-user-email", (req, res) => {
    if (req.session.user && req.session.user.email) {
        res.json({ email: req.session.user.email });
    } else {
        res.json({ email: "" });
    }
});

app.get("/start", async (req, res) => {
    if (!req.session.user) {
        return res.redirect("/login"); // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚Üí –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ login
    }

    res.render("learning/start", { 
        title: "–ü–æ—á–∞—Ç–æ–∫ –∑–∞–Ω—è—Ç—å", 
        user: req.session.user // –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    });
});




// –°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
app.get('/register', (req, res) => {
    // –í–∞—à –∫–æ–¥, –¥–µ –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è success
    const success = false; // –∞–±–æ false, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó

    res.render('users/register', { success: success });
});





// –í–∏—Ö—ñ–¥
app.get("/logout", (req, res) => {
    res.clearCookie("user"); // –í–∏–¥–∞–ª—è—î–º–æ –∫—É–∫—ñ
    req.session.destroy(() => {
        res.redirect("/");
    });
});

// üìå –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é
app.get("/profile", async (req, res) => {
    if (!req.session.user) return res.redirect("/login");

    try {
        const user = await pool.query("SELECT name, email, profile_picture FROM users WHERE id = $1", 
            [req.session.user.id]);

        if (user.rows.length === 0) return res.redirect("/logout");

        res.render("users/profile", { title: "–ü—Ä–æ—Ñ—ñ–ª—å", user: user.rows[0] });
    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:", err);
        res.redirect("/");
    }
});
app.get("/settings", async (req, res) => {
    if (!req.session.user) {
        return res.redirect("/login");
    }

    try {
        const result = await pool.query("SELECT name, email, profile_picture FROM users WHERE id = $1", [req.session.user.id]);
        const user = result.rows[0];

        const message = req.session.message; // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Å–µ—Å—ñ—ó
        req.session.message = null; // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Ä–µ–Ω–¥–µ—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏

        res.render("users/settings", { user, message });
    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:", err);
        res.redirect("/start");
    }
});



const flash = require('connect-flash');
app.use(flash());

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

app.post("/register", async (req, res) => {
    const { name, email, password, "confirm-password": confirmPassword } = req.body;

    if (!name || !email || !password || !confirmPassword) {
        return res.json({ success: false, message: "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è!" });
    }

    if (password !== confirmPassword) {
        return res.json({ success: false, message: "–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å!" });
    }

    try {
        const existingUser = await pool.query("SELECT * FROM users WHERE email = $1", [email]);
        if (existingUser.rows.length > 0) {
            return res.json({ success: false, message: "Email –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è!" });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const verificationToken = crypto.randomBytes(32).toString("hex");

        await pool.query(
            "INSERT INTO users (name, email, password, verification_token, is_verified) VALUES ($1, $2, $3, $4, $5)",
            [name, email, hashedPassword, verificationToken, false]
        );

        const BASE_URL = process.env.BASE_URL || "http://localhost:3000"; // üî• –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è

const confirmLink = `${BASE_URL}/confirm-email?token=${verificationToken}`;

        await transporter.sendMail({
            from: process.env.TESTMAIL_SENDER,
            to: email,
            subject: "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é",
            html: `
                <div style="max-width: 600px; margin: auto; padding: 20px; font-family: Arial, sans-serif; border-radius: 10px; background: #f9f9f9; text-align: center;">
                    <h2 style="color: #333;">–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, ${name}!</h2>
                    <p>–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∞—à email:</p>
                    <a href="${confirmLink}" style="display: inline-block; padding: 10px 20px; background: #28a745; color: white; text-decoration: none; border-radius: 5px; font-size: 16px;">
                        –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ Email
                    </a>
                    <p style="margin-top: 10px; font-size: 14px; color: #666;">–Ø–∫—â–æ –≤–∏ –Ω–µ —Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è, –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É–π—Ç–µ —Ü–µ–π –ª–∏—Å—Ç.</p>
                </div>
            `
        });
        

        return res.json({ success: true });

    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", err);
        return res.json({ success: false, message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
    }
});

app.get("/confirm-email", async (req, res) => {
    const { token } = req.query;

    if (!token) {
        return res.render("email/confirmation", { success: false, message: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è." });
    }

    try {
        const user = await pool.query("SELECT * FROM users WHERE verification_token = $1", [token]);

        if (user.rows.length === 0) {
            return res.render("email/confirmation", { success: false, message: "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–¥—ñ–π—Å–Ω–µ –∞–±–æ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–µ." });
        }

        await pool.query(
            "UPDATE users SET is_verified = true, verification_token = NULL WHERE verification_token = $1",
            [token]
        );

        return res.render("email/confirmation", { success: true, message: "–í–∞—à email —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –í–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏." });

    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email:", err);
        return res.render("email/confirmation", { success: false, message: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ." });
    }
});


// –í —Ñ–∞–π–ª–µ server.js

app.post("/login", async (req, res) => {
    const { email, password, redirect } = req.body;

    try {
        // –ó–∞–ø–∏—Ç —Ç–µ–ø–µ—Ä –≤–∫–ª—é—á–∞—î –Ω–æ–≤—ñ –ø–æ–ª—è
        const user = await pool.query("SELECT * FROM users WHERE email = $1", [email]);

        if (user.rows.length === 0) {
            req.session.message = "–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å!";
            return res.redirect("/login");
        }

        const userData = user.rows[0];

        if (!userData.is_verified) {
            req.session.message = "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º!";
            return res.redirect("/login");
        }

        const isValidPassword = await bcrypt.compare(password, userData.password);
        if (!isValidPassword) {
            req.session.message = "–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å!";
            return res.redirect("/login");
        }

        // üî• **–û–ù–û–í–õ–ï–ù–û: –î–æ–¥–∞—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ —Å–µ—Å—ñ—é**
        req.session.user = { 
            id: userData.id, 
            name: userData.name, 
            email: userData.email, 
            role: userData.role,
            latitude: userData.latitude,     // –î–æ–¥–∞–Ω–æ
            longitude: userData.longitude   // –î–æ–¥–∞–Ω–æ
        };

        res.cookie("user", JSON.stringify(req.session.user), { 
            maxAge: 7 * 24 * 60 * 60 * 1000, 
            httpOnly: true 
        });

        const targetPage = redirect && redirect !== "undefined" ? redirect : "/system"; // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ /system
        res.redirect(targetPage);
    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:", err);
        req.session.message = "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!";
        res.redirect("/login");
    }
});

app.post("/api/update-location", async (req, res) => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
    if (!req.session.user) {
        return res.status(401).json({ success: false, message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" });
    }

    const { latitude, longitude } = req.body;
    const userId = req.session.user.id;

    // –ü—Ä–æ—Å—Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (latitude == null || longitude == null) {
        return res.status(400).json({ success: false, message: "–ù–µ–≤—ñ—Ä–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏" });
    }

    try {
        await pool.query(
            "UPDATE users SET latitude = $1, longitude = $2 WHERE id = $3",
            [latitude, longitude, userId]
        );

        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ —Å–µ—Å—ñ—ó
        req.session.user.latitude = latitude;
        req.session.user.longitude = longitude;

        res.json({ success: true, message: "–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ!" });

    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è:", err);
        res.status(500).json({ success: false, message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});




app.post("/contact", async (req, res) => {
    const { email, message } = req.body;

    if (!email || !message) {
        return res.render("contact", { 
            title: "–ö–æ–Ω—Ç–∞–∫—Ç–∏", 
            message: "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è!", 
            user: req.session.user 
        });
    }

    try {
        await pool.query("INSERT INTO messages (email, message) VALUES ($1, $2)", [email, message]);
        res.render("contact", { 
            title: "–ö–æ–Ω—Ç–∞–∫—Ç–∏", 
            message: "–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!", 
            user: req.session.user 
        });
    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", err);
        res.render("contact", { 
            title: "–ö–æ–Ω—Ç–∞–∫—Ç–∏", 
            message: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", 
            user: req.session.user 
        });
    }
});





// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è S3 –¥–ª—è DigitalOcean Spaces
const s3 = new S3Client({
    region: "fra1", 
    endpoint: process.env.DO_SPACES_ENDPOINT, // <-- –¢—É—Ç –º–∞—î –±—É—Ç–∏ —Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∞ –∞–¥—Ä–µ—Å–∞
    credentials: {
        accessKeyId: process.env.DO_SPACES_KEY,
        secretAccessKey: process.env.DO_SPACES_SECRET
    }
});



// –í —Ñ–∞–π–ª—ñ server.js

// üîπ **–û–ù–û–í–õ–ï–ù–ò–ô –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é**
app.post("/upload-profile-pic", upload.single("profilePic"), async (req, res) => {
    if (!req.file) {
        req.session.message = "–§–∞–π–ª –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!";
        return res.redirect("/settings");
    }
    try {
        // –¢–µ–ø–µ—Ä req.file.buffer –±—É–¥–µ —ñ—Å–Ω—É–≤–∞—Ç–∏, –±–æ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ memoryStorage
        const processedImageBuffer = await sharp(req.file.buffer)
            .resize({ width: 500, height: 500, fit: 'cover' })
            .webp({ quality: 80 })
            .toBuffer();

        // ... –ø–æ–¥–∞–ª—å—à–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ S3 ...
        const uniqueFileName = `profiles/${req.session.user.id}-${Date.now()}.webp`;
        const uploadParams = {
            Bucket: process.env.DO_SPACES_BUCKET,
            Key: uniqueFileName,
            Body: processedImageBuffer,
            ACL: "public-read",
            ContentType: "image/webp"
        };
        await s3.send(new PutObjectCommand(uploadParams));

        // ... –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ë–î —Ç–∞ —Ä–µ–¥—ñ—Ä–µ–∫—Ç
        const profilePicUrl = `https://${process.env.DO_SPACES_BUCKET}.${process.env.DO_SPACES_ENDPOINT.replace('https://', '')}/${uniqueFileName}`;
        await pool.query("UPDATE users SET profile_picture = $1 WHERE id = $2", [profilePicUrl, req.session.user.id]);
        req.session.user.profile_picture = profilePicUrl;
        req.session.message = "–§–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!";
        res.redirect("/settings");

    } catch (err) {
        // ... –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ ...
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é:", err);
        req.session.message = "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.";
        res.redirect("/settings");
    }
});


// üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω—ñ–∫–Ω–µ–π–º—É
app.post("/update-name", async (req, res) => {
    if (!req.session.user) return res.redirect("/login");

    const { newName } = req.body;
    if (!newName) {
        req.session.message = "–ù—ñ–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º!";
        return res.redirect("/settings");
    }

    try {
        await pool.query("UPDATE users SET name = $1 WHERE id = $2", [newName, req.session.user.id]);
        req.session.user.name = newName;
        req.session.message = "–ù—ñ–∫–Ω–µ–π–º –æ–Ω–æ–≤–ª–µ–Ω–æ!";
    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω—ñ–∫–Ω–µ–π–º—É:", err);
        req.session.message = "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –Ω—ñ–∫–Ω–µ–π–º—É!";
    }
    res.redirect("/settings");
});


// üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
app.post("/update-password", async (req, res) => {
    if (!req.session.user) return res.redirect("/login");

    const { oldPassword, newPassword } = req.body;
    if (!oldPassword || !newPassword) {
        req.session.message = "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è!";
        return res.redirect("/settings");
    }

    try {
        const user = await pool.query("SELECT password FROM users WHERE id = $1", [req.session.user.id]);
        const validPass = await bcrypt.compare(oldPassword, user.rows[0].password);

        if (!validPass) {
            req.session.message = "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å!";
            return res.redirect("/settings");
        }

        const hashedPassword = await bcrypt.hash(newPassword, 10);
        await pool.query("UPDATE users SET password = $1 WHERE id = $2", [hashedPassword, req.session.user.id]);
        req.session.message = "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!";
    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è:", err);
        req.session.message = "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–∞—Ä–æ–ª—è!";
    }
    res.redirect("/settings");
});


app.get("/api/sensors-with-latest-readings", async (req, res) => {
    try {
        // SQL-–∑–∞–ø–∏—Ç, —è–∫–∏–π –º–∏ –æ–±–≥–æ–≤–æ—Ä—é–≤–∞–ª–∏ —Ä–∞–Ω—ñ—à–µ
        const query = `
            SELECT DISTINCT ON (s.sensor_id)
                s.sensor_id,
                s.sensor_name,
                s.sensor_type,
                s.latitude,
                s.longitude,
                r.status,
                r.data_values,
                r.timestamp AS last_updated
            FROM 
                sensors s
            JOIN 
                sensor_readings r ON s.sensor_id = r.sensor_id
            WHERE
                s.is_active = TRUE
            ORDER BY 
                s.sensor_id, 
                r.timestamp DESC;
        `;
        const { rows } = await pool.query(query);
        res.json(rows); // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON
    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫–∞—Ä—Ç–∏:", err);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö" });
    }
});


// 2. –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å–µ–Ω—Å–æ—Ä–∞ —Ç–∞ –π–æ–≥–æ –ø–µ—Ä—à–æ–≥–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞
// –í–ê–ñ–õ–ò–í–û: —Ü–µ–π –º–∞—Ä—à—Ä—É—Ç –º–∞—î –±—É—Ç–∏ –∑–∞—Ö–∏—â–µ–Ω–∏–º, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–æ—Å—Ç—É–ø–Ω–∏–º —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
const checkAdmin = (req, res, next) => {
    if (req.session.user && req.session.user.role === 'admin') {
        return next();
    }
    return res.status(403).json({ message: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞." });
};

app.post("/api/sensors", checkAdmin, async (req, res) => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ—î–∫—Ç—ñ —Ç—É—Ç –º–∞—î –±—É—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —á–µ—Ä–µ–∑ express-validator)
    const { sensor_name, sensor_type, latitude, longitude, status, description, data_values } = req.body;

    if (!sensor_name || !sensor_type || latitude == null || longitude == null) {
        return res.status(400).json({ message: "–û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: –Ω–∞–∑–≤–∞, —Ç–∏–ø, —à–∏—Ä–æ—Ç–∞ —Ç–∞ –¥–æ–≤–≥–æ—Ç–∞." });
    }

    const client = await pool.connect();
    try {
        await client.query('BEGIN'); // –ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó

        // –ö—Ä–æ–∫ 1: –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Å–µ–Ω—Å–æ—Ä –¥–æ —Ç–∞–±–ª–∏—Ü—ñ 'sensors' —ñ –æ—Ç—Ä–∏–º—É—î–º–æ –π–æ–≥–æ ID
        const newSensorQuery = `
            INSERT INTO sensors (sensor_name, sensor_type, latitude, longitude, description) 
            VALUES ($1, $2, $3, $4, $5) 
            RETURNING sensor_id;
        `;
        const sensorResult = await client.query(newSensorQuery, [sensor_name, sensor_type, latitude, longitude, description]);
        const newSensorId = sensorResult.rows[0].sensor_id;

        // –ö—Ä–æ–∫ 2: –î–æ–¥–∞—î–º–æ –ø–µ—Ä—à–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ –¥–ª—è —Ü—å–æ–≥–æ —Å–µ–Ω—Å–æ—Ä–∞ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ 'sensor_readings'
        // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ data_values —î –≤–∞–ª—ñ–¥–Ω–∏–º JSON –∞–±–æ null
        const dataValuesToInsert = (data_values && Object.keys(data_values).length > 0) ? JSON.stringify(data_values) : null;
        
        if (dataValuesToInsert) {
             const newReadingQuery = `
                INSERT INTO sensor_readings (sensor_id, status, data_values) 
                VALUES ($1, $2, $3);
            `;
            await client.query(newReadingQuery, [newSensorId, status, dataValuesToInsert]);
        }
       
        await client.query('COMMIT'); // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        res.status(201).json({ message: `–°–µ–Ω—Å–æ—Ä '${sensor_name}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.` });

    } catch (err) {
        await client.query('ROLLBACK'); // –í—ñ–¥–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        console.error("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å–µ–Ω—Å–æ—Ä–∞:", err);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Å–µ–Ω—Å–æ—Ä–∞." });
    } finally {
        client.release(); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –¥–æ –ø—É–ª—É
    }
});


app.get("/api/sensors/:id/history", async (req, res) => {
    try {
        const { id } = req.params;
        const time_24_hours_ago = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();

        const query = `
            SELECT data_values, timestamp 
            FROM sensor_readings 
            WHERE sensor_id = $1 AND timestamp >= $2
            ORDER BY timestamp ASC;
        `;
        
        const { rows } = await pool.query(query, [id, time_24_hours_ago]);
        res.json(rows);

    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –¥–∞—Ç—á–∏–∫–∞:", err);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–∞–º–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
// –í —Ñ–∞–π–ª—ñ server.js

// server.js

app.get('/admin', checkAdmin, async (req, res) => {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        const result = await pool.query('SELECT id, name, email, role, is_verified FROM users ORDER BY id ASC');
        
        // üî• –í–ê–ñ–õ–ò–í–û: –ü–µ—Ä–µ–¥–∞—î–º–æ –º–∞—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—ñ–¥ —ñ–º–µ–Ω–µ–º 'users' —É —à–∞–±–ª–æ–Ω
        res.render('system/admin', {
            title: '–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
            user: req.session.user,
            users: result.rows, // <-- –û—Å—å —Ü—è –∑–º—ñ–Ω–Ω–∞ –º–∞—î –±—É—Ç–∏
        });
    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ:", err);
        res.status(500).send("–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
    }
});

// API: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.post('/api/admin/users/:id/update-role', checkAdmin, async (req, res) => {
    const { id } = req.params;
    const { newRole } = req.body;

    if (!['admin', 'user'].includes(newRole)) {
        return res.status(400).json({ success: false, message: '–ù–µ–≤—ñ—Ä–Ω–∞ —Ä–æ–ª—å' });
    }

    try {
        await pool.query('UPDATE users SET role = $1 WHERE id = $2', [newRole, id]);
        res.json({ success: true, message: '–†–æ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ' });
    } catch (err) {
        res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API: –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.delete('/api/admin/users/:id', checkAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        // –ü–æ—Ç—Ä—ñ–±–Ω–æ –±—É—Ç–∏ –æ–±–µ—Ä–µ–∂–Ω–∏–º –∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º, –º–æ–∂–ª–∏–≤–æ, –∫—Ä–∞—â–µ –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏
        // –ê–ª–µ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É —Ä–µ–∞–ª—ñ–∑—É—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        await pool.query('DELETE FROM users WHERE id = $1', [id]);
        res.json({ success: true, message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ' });
    } catch (err) {
        res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –í —Ñ–∞–π–ª—ñ server.js

// API: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–µ–Ω—Å–æ—Ä—ñ–≤
app.get('/api/admin/sensors', checkAdmin, async (req, res) => {
    try {
        const result = await pool.query('SELECT * FROM sensors ORDER BY sensor_id ASC');
        res.json(result.rows);
    } catch (err) {
        res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
app.get('/api/admin/readings', checkAdmin, async (req, res) => {
    try {
        // –û–±–µ—Ä–µ–∂–Ω–æ! –¶–µ–π –∑–∞–ø–∏—Ç –º–æ–∂–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –¥—É–∂–µ –±–∞–≥–∞—Ç–æ –¥–∞–Ω–∏—Ö.
        // –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ—î–∫—Ç—ñ —Ç—É—Ç –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –º–∞—î –±—É—Ç–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è (LIMIT/OFFSET).
        const result = await pool.query('SELECT * FROM sensor_readings ORDER BY timestamp DESC LIMIT 100'); // –û–±–º–µ–∂—É—î–º–æ –≤–∏–≤—ñ–¥ –¥–æ 100 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤
        res.json(result.rows);
    } catch (err) {
        res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API: –ï–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ñ –≤ CSV
app.get('/api/admin/export/:tableName', checkAdmin, async (req, res) => {
    const { tableName } = req.params;
    
    // –ë—ñ–ª–∏–π —Å–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É —Ç–∞–±–ª–∏—Ü—å
    const allowedTables = ['users', 'sensors', 'sensor_readings', 'messages'];
    if (!allowedTables.includes(tableName)) {
        return res.status(400).send('–ù–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º–∞ –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ');
    }

    try {
        const result = await pool.query(`SELECT * FROM ${tableName}`);
        const data = result.rows;

        if (data.length === 0) {
            return res.status(404).send('–¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î');
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è JSON –≤ CSV
        const headers = Object.keys(data[0]);
        let csv = headers.join(',') + '\n';
        data.forEach(row => {
            csv += headers.map(header => JSON.stringify(row[header])).join(',') + '\n';
        });

        res.header('Content-Type', 'text/csv');
        res.attachment(`${tableName}-${Date.now()}.csv`);
        res.send(csv);

    } catch (err) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É —Ç–∞–±–ª–∏—Ü—ñ ${tableName}:`, err);
        res.status(500).send('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
});

// API –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
app.post('/api/admin/users/:id/update-role', checkAdmin, async (req, res) => {
    const { id } = req.params;
    const { newRole } = req.body;
    if (!['admin', 'user'].includes(newRole)) {
        return res.status(400).json({ success: false, message: '–ù–µ–≤—ñ—Ä–Ω–∞ —Ä–æ–ª—å' });
    }
    try {
        await pool.query('UPDATE users SET role = $1 WHERE id = $2', [newRole, id]);
        res.json({ success: true, message: '–†–æ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ' });
    } catch (err) { res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }); }
});

app.delete('/api/admin/users/:id', checkAdmin, async (req, res) => {
    try {
        await pool.query('DELETE FROM users WHERE id = $1', [req.params.id]);
        res.json({ success: true, message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ' });
    } catch (err) { res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }); }
});

// API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
app.get('/api/admin/sensors', checkAdmin, async (req, res) => {
    try {
        const result = await pool.query('SELECT * FROM sensors ORDER BY sensor_id ASC');
        res.json(result.rows);
    } catch (err) { res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }); }
});

app.get('/api/admin/readings', checkAdmin, async (req, res) => {
    try {
        const result = await pool.query('SELECT * FROM sensor_readings ORDER BY timestamp DESC LIMIT 100');
        res.json(result.rows);
    } catch (err) { res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }); }
});

app.get('/api/admin/messages', checkAdmin, async (req, res) => {
    try {
        const result = await pool.query('SELECT * FROM messages ORDER BY created_at DESC');
        res.json(result.rows);
    } catch (err) { res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }); }
});


// API –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É —Ç–∞–±–ª–∏—Ü—ñ –≤ CSV
app.get('/api/admin/export/:tableName', checkAdmin, async (req, res) => {
    const { tableName } = req.params;
    const allowedTables = ['users', 'sensors', 'sensor_readings', 'messages'];
    if (!allowedTables.includes(tableName)) {
        return res.status(400).send('–ù–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º–∞ –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ');
    }
    try {
        const result = await pool.query(`SELECT * FROM ${tableName}`);
        const data = result.rows;
        if (data.length === 0) return res.status(404).send('–¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è');
        
        const headers = Object.keys(data[0]);
        let csv = headers.join(',') + '\n';
        data.forEach(row => {
            csv += headers.map(header => JSON.stringify(row[header])).join(',') + '\n';
        });

        res.header('Content-Type', 'text/csv');
        res.attachment(`${tableName}-${Date.now()}.csv`);
        res.send(csv);
    } catch (err) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É ${tableName}:`, err);
        res.status(500).send('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
});


io.on('connection', (socket) => {
    const intervalId = setInterval(async () => {
        try {
            const [cpu, mem, osInfo, dbStats] = await Promise.all([
                si.currentLoad(), si.mem(), si.osInfo(),
                pool.query(`SELECT (SELECT COUNT(*) FROM users) AS users, (SELECT COUNT(*) FROM sensors) AS sensors, (SELECT COUNT(*) FROM sensor_readings) AS readings, (SELECT COUNT(*) FROM messages) AS messages`)
            ]);
            const stats = {
                cpu: cpu.currentLoad.toFixed(2),
                memory: { used: (mem.used / 1073741824).toFixed(2), total: (mem.total / 1073741824).toFixed(2) },
                os: `${osInfo.distro} (${osInfo.platform})`,
                db: dbStats.rows[0]
            };
            socket.emit('server-stats', stats);
        } catch (e) { console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', e); }
    }, 2000);
    socket.on('disconnect', () => clearInterval(intervalId));
});

// --- 6. –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
const port = process.env.PORT || 3000;
httpServer.listen(port, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${port}`));
