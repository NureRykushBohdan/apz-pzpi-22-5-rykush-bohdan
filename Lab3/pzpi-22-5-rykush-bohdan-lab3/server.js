require("dotenv").config();
const express = require("express");
const path = require("path");
const { Pool } = require("pg");
const bcrypt = require("bcryptjs");
const session = require("express-session");
const nodemailer = require("nodemailer");
const crypto = require("crypto");
const multer = require("multer");
const pgSession = require("connect-pg-simple")(session);
const { S3Client, PutObjectCommand } = require("@aws-sdk/client-s3");
const multerS3 = require("multer-s3");





const app = express();
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(express.static(path.join(__dirname, "public")));


const cookieParser = require("cookie-parser");
app.use(cookieParser());


const port = process.env.PORT || 3000;


app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "views")); 

app.use(express.urlencoded({ extended: true }));

app.use(express.json());



const pool = new Pool({
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_DATABASE,
    password: process.env.DB_PASSWORD,
    port: process.env.DB_PORT,
    ssl: {
        rejectUnauthorized: false
    }
});
app.use(session({
    store: new pgSession({
        pool: pool, 
        tableName: 'user_sessions', 
        createTableIfMissing: true 
    }),
    secret: process.env.SESSION_SECRET || "your_secret_key",
    resave: false,
    saveUninitialized: false,
    cookie: {
        maxAge: 7 * 24 * 60 * 60 * 1000, // 7 –¥–Ω—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
        secure: false, // –Ø–∫—â–æ HTTPS, –ø–æ—Å—Ç–∞–≤—Ç–µ true
        httpOnly: true
    }
}));

const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
        user: process.env.TESTMAIL_SENDER,
        pass: process.env.TESTMAIL_API_KEY
    }
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
pool.query('SELECT NOW()', (err, res) => {
    if (err) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', err);
    } else {
        console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', res.rows[0]);
    }
});

// –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
app.get("/", (req, res) => {
    if (!req.session.user && req.cookies.user) {
        req.session.user = JSON.parse(req.cookies.user);
    }
    res.render("front/index", { title: "–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞", user: req.session.user });
});

app.get("/login", (req, res) => {
    const redirectUrl = req.query.redirect || "/";
    res.render("front/login", { message: req.session.message || "", redirect: redirectUrl });
    req.session.message = ""; // –û—á–∏—â–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
});


// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ "–ü—Ä–æ –Ω–∞—Å"
app.get("/about-us", (req, res) => {
    res.render("front/About_Us", { title: "–ü—Ä–æ –Ω–∞—Å", user: req.session.user });
});

app.get("/map", (req, res) => {
    res.render("front/map", { title: "–º–∞–ø–∞", user: req.session.user });
});

app.get("/about-system", (req, res) => {
    res.render("front/about-system", { title: "–ø—Ä–æ —Å–∏—Å—Ç–µ–º—É", user: req.session.user });
});

app.get("/contact", (req, res) => {
    res.render("front/contact", { 
        title: "–ö–æ–Ω—Ç–∞–∫—Ç–∏", 
        user: req.session.user || null, 
        message: null 
    });
});

app.get("/get-user-email", (req, res) => {
    if (req.session.user && req.session.user.email) {
        res.json({ email: req.session.user.email });
    } else {
        res.json({ email: "" });
    }
});

app.get("/start", async (req, res) => {
    if (!req.session.user) {
        return res.redirect("/login"); // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚Üí –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ login
    }

    res.render("learning/start", { 
        title: "–ü–æ—á–∞—Ç–æ–∫ –∑–∞–Ω—è—Ç—å", 
        user: req.session.user // –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    });
});




// –°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
app.get('/register', (req, res) => {
    // –í–∞—à –∫–æ–¥, –¥–µ –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è success
    const success = false; // –∞–±–æ false, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó

    res.render('users/register', { success: success });
});





// –í–∏—Ö—ñ–¥
app.get("/logout", (req, res) => {
    res.clearCookie("user"); // –í–∏–¥–∞–ª—è—î–º–æ –∫—É–∫—ñ
    req.session.destroy(() => {
        res.redirect("/");
    });
});

// üìå –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é
app.get("/profile", async (req, res) => {
    if (!req.session.user) return res.redirect("/login");

    try {
        const user = await pool.query("SELECT name, email, profile_picture FROM users WHERE id = $1", 
            [req.session.user.id]);

        if (user.rows.length === 0) return res.redirect("/logout");

        res.render("users/profile", { title: "–ü—Ä–æ—Ñ—ñ–ª—å", user: user.rows[0] });
    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:", err);
        res.redirect("/");
    }
});
app.get("/settings", async (req, res) => {
    if (!req.session.user) {
        return res.redirect("/login");
    }

    try {
        const result = await pool.query("SELECT name, email, profile_picture FROM users WHERE id = $1", [req.session.user.id]);
        const user = result.rows[0];

        const message = req.session.message; // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Å–µ—Å—ñ—ó
        req.session.message = null; // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Ä–µ–Ω–¥–µ—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏

        res.render("users/settings", { user, message });
    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:", err);
        res.redirect("/start");
    }
});



const flash = require('connect-flash');
app.use(flash());

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

app.post("/register", async (req, res) => {
    const { name, email, password, "confirm-password": confirmPassword } = req.body;

    if (!name || !email || !password || !confirmPassword) {
        return res.json({ success: false, message: "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è!" });
    }

    if (password !== confirmPassword) {
        return res.json({ success: false, message: "–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å!" });
    }

    try {
        const existingUser = await pool.query("SELECT * FROM users WHERE email = $1", [email]);
        if (existingUser.rows.length > 0) {
            return res.json({ success: false, message: "Email –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è!" });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const verificationToken = crypto.randomBytes(32).toString("hex");

        await pool.query(
            "INSERT INTO users (name, email, password, verification_token, is_verified) VALUES ($1, $2, $3, $4, $5)",
            [name, email, hashedPassword, verificationToken, false]
        );

        const BASE_URL = process.env.BASE_URL || "http://localhost:3000"; // üî• –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è

const confirmLink = `${BASE_URL}/confirm-email?token=${verificationToken}`;

        await transporter.sendMail({
            from: process.env.TESTMAIL_SENDER,
            to: email,
            subject: "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é",
            html: `
                <div style="max-width: 600px; margin: auto; padding: 20px; font-family: Arial, sans-serif; border-radius: 10px; background: #f9f9f9; text-align: center;">
                    <h2 style="color: #333;">–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, ${name}!</h2>
                    <p>–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∞—à email:</p>
                    <a href="${confirmLink}" style="display: inline-block; padding: 10px 20px; background: #28a745; color: white; text-decoration: none; border-radius: 5px; font-size: 16px;">
                        –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ Email
                    </a>
                    <p style="margin-top: 10px; font-size: 14px; color: #666;">–Ø–∫—â–æ –≤–∏ –Ω–µ —Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è, –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É–π—Ç–µ —Ü–µ–π –ª–∏—Å—Ç.</p>
                </div>
            `
        });
        

        return res.json({ success: true });

    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", err);
        return res.json({ success: false, message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
    }
});

app.get("/confirm-email", async (req, res) => {
    const { token } = req.query;

    if (!token) {
        return res.render("email/confirmation", { success: false, message: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è." });
    }

    try {
        const user = await pool.query("SELECT * FROM users WHERE verification_token = $1", [token]);

        if (user.rows.length === 0) {
            return res.render("email/confirmation", { success: false, message: "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–¥—ñ–π—Å–Ω–µ –∞–±–æ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–µ." });
        }

        await pool.query(
            "UPDATE users SET is_verified = true, verification_token = NULL WHERE verification_token = $1",
            [token]
        );

        return res.render("email/confirmation", { success: true, message: "–í–∞—à email —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –í–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏." });

    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email:", err);
        return res.render("email/confirmation", { success: false, message: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ." });
    }
});


app.post("/login", async (req, res) => {
    const { email, password, redirect } = req.body; // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ redirect

    try {
        const user = await pool.query("SELECT * FROM users WHERE email = $1", [email]);

        if (user.rows.length === 0) {
            req.session.message = "–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å!";
            return res.redirect("/login");
        }

        const userData = user.rows[0];

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email
        if (!userData.is_verified) {
            req.session.message = "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º!";
            return res.redirect("/login");
        }

        const isValidPassword = await bcrypt.compare(password, userData.password);
        if (!isValidPassword) {
            req.session.message = "–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å!";
            return res.redirect("/login");
        }

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–µ—Å—ñ—ó
        req.session.user = { 
            id: userData.id, 
            name: userData.name, 
            email: userData.email, 
            role: userData.role 
        };

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ cookies
        res.cookie("user", JSON.stringify(req.session.user), { 
            maxAge: 7 * 24 * 60 * 60 * 1000, 
            httpOnly: true 
        });

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ redirect, —è–∫—â–æ –≤—ñ–Ω —î, —ñ–Ω–∞–∫—à–µ –π–¥–µ–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
        const targetPage = redirect && redirect !== "undefined" ? redirect : "/";
        res.redirect(targetPage);
    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:", err);
        req.session.message = "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!";
        res.redirect("/login");
    }
});






app.post("/contact", async (req, res) => {
    const { email, message } = req.body;

    if (!email || !message) {
        return res.render("contact", { 
            title: "–ö–æ–Ω—Ç–∞–∫—Ç–∏", 
            message: "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è!", 
            user: req.session.user 
        });
    }

    try {
        await pool.query("INSERT INTO messages (email, message) VALUES ($1, $2)", [email, message]);
        res.render("contact", { 
            title: "–ö–æ–Ω—Ç–∞–∫—Ç–∏", 
            message: "–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!", 
            user: req.session.user 
        });
    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", err);
        res.render("contact", { 
            title: "–ö–æ–Ω—Ç–∞–∫—Ç–∏", 
            message: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", 
            user: req.session.user 
        });
    }
});





// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è S3 –¥–ª—è DigitalOcean Spaces
const s3 = new S3Client({
    region: "fra1", 
    endpoint: process.env.DO_SPACES_ENDPOINT,
    credentials: {
        accessKeyId: process.env.DO_SPACES_KEY,
        secretAccessKey: process.env.DO_SPACES_SECRET
    }
});

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Multer –¥–ª—è DigitalOcean Spaces
const upload = multer({
    storage: multerS3({
        s3: s3,
        bucket: "nikkme",
        acl: "public-read",
        key: (req, file, cb) => {
            const uniqueFileName = `profiles/${req.session.user.id}-${Date.now()}.webp`;
            cb(null, uniqueFileName);
        }
    }),
    limits: { fileSize: 300000 }, // –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ 0.3 MB
});

// üîπ **–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é**
app.post("/upload-profile-pic", upload.single("profilePic"), async (req, res) => {
    if (!req.file) {
        req.session.message = "–§–∞–π–ª –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!";
        return res.redirect("/settings");
    }

    const profilePicUrl = `https://nikkme.fra1.digitaloceanspaces.com/${req.file.key}`;

    try {
        await pool.query("UPDATE users SET profile_picture = $1 WHERE id = $2", [profilePicUrl, req.session.user.id]);
        req.session.user.profile_picture = profilePicUrl;
        res.redirect("/settings");
    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é:", err);
        res.redirect("/settings");
    }
});


// üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω—ñ–∫–Ω–µ–π–º—É
app.post("/update-name", async (req, res) => {
    if (!req.session.user) return res.redirect("/login");

    const { newName } = req.body;
    if (!newName) {
        req.session.message = "–ù—ñ–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º!";
        return res.redirect("/settings");
    }

    try {
        await pool.query("UPDATE users SET name = $1 WHERE id = $2", [newName, req.session.user.id]);
        req.session.user.name = newName;
        req.session.message = "–ù—ñ–∫–Ω–µ–π–º –æ–Ω–æ–≤–ª–µ–Ω–æ!";
    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω—ñ–∫–Ω–µ–π–º—É:", err);
        req.session.message = "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –Ω—ñ–∫–Ω–µ–π–º—É!";
    }
    res.redirect("/settings");
});


// üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
app.post("/update-password", async (req, res) => {
    if (!req.session.user) return res.redirect("/login");

    const { oldPassword, newPassword } = req.body;
    if (!oldPassword || !newPassword) {
        req.session.message = "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è!";
        return res.redirect("/settings");
    }

    try {
        const user = await pool.query("SELECT password FROM users WHERE id = $1", [req.session.user.id]);
        const validPass = await bcrypt.compare(oldPassword, user.rows[0].password);

        if (!validPass) {
            req.session.message = "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å!";
            return res.redirect("/settings");
        }

        const hashedPassword = await bcrypt.hash(newPassword, 10);
        await pool.query("UPDATE users SET password = $1 WHERE id = $2", [hashedPassword, req.session.user.id]);
        req.session.message = "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!";
    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è:", err);
        req.session.message = "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–∞—Ä–æ–ª—è!";
    }
    res.redirect("/settings");
});




// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${port}`);
});
