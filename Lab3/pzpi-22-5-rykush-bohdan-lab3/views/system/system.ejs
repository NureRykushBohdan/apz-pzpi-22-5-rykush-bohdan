<!DOCTYPE html>
<html lang="<%= lang %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= __('System') %> - EcoGuard</title>
    <link rel="stylesheet" href="/style/partials/footer_header.css">
    <link rel="stylesheet" href="/style/system/system.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <style>
        /* Анімація для маркера на карті */
        @keyframes pulse {
            0% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.5); opacity: 0.5; }
            100% { transform: scale(2); opacity: 0; }
        }
        .pulse {
            border-radius: 50%;
            border: 2px solid #3498db;
            animation: pulse 1.5s infinite;
        }
    </style>
</head>
<body>
    <%- include('../partials/header') %>

    <main class="system-main" data-user='<%- JSON.stringify(user) %>'>
        <div class="system-grid">
            <div class="widget welcome-widget">
                <h1><%= __('Welcome,') %> <%= user.name %>!</h1>
                <p><%= __('Here is the current environmental status of your region.') %></p>
            </div>
            <div class="widget nearest-sensor-widget">
                <h3><%= __('Nearest sensor') %></h3>
                <div id="nearest-sensor-info"><p><%= __('Loading data...') %></p></div>
            </div>
            <div class="widget history-widget">
                <h3><%= __('History (24h)') %></h3>
                <div class="history-controls" id="historyControls"></div>
                <div class="chart-item">
                    <canvas id="historyChart"></canvas>
                </div>
            </div>
            <div class="widget map-widget">
                <h3><%= __('Sensor map') %></h3>
                <div id="mini-map"></div>
                <a href="/map" class="map-link"><%= __('Go to full map →') %></a>
            </div>
            <div class="widget leaderboard-widget">
                <h3><%= __('Environmental rating') %></h3>
                <div class="leaderboard-columns">
                    <div class="leaderboard-column">
                        <h4>✅ <%= __('Cleanest zones') %></h4>
                        <ul id="best-performers"><li><%= __('Loading...') %></li></ul>
                    </div>
                    <div class="leaderboard-column">
                        <h4>⚠️ <%= __('Most polluted zones') %></h4>
                        <ul id="worst-performers"><li><%= __('Loading...') %></li></ul>
                    </div>
                </div>
            </div>
            <div class="widget stats-widget">
                <h3><%= __('Overall sensor statistics') %></h3>
                <div class="chart-groups-container">
                    <div class="chart-group">
                        <h4><%= __('Air quality') %></h4>
                        <div class="chart-item"><canvas id="co2Chart"></canvas></div>
                        <div class="chart-item"><canvas id="pm25Chart"></canvas></div>
                        <div class="chart-item"><canvas id="so2Chart"></canvas></div>
                    </div>
                    <div class="chart-group">
                        <h4><%= __('Water quality') %></h4>
                        <div class="chart-item"><canvas id="tempChart"></canvas></div>
                        <div class="chart-item"><canvas id="acidityChart"></canvas></div>
                    </div>
                    <div class="chart-group">
                        <h4><%= __('Noise level') %></h4>
                        <div class="chart-item"><canvas id="noiseChart"></canvas></div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <%- include('../partials/footer') %>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    
    <script>
        const pageTranslations = {
            loading: "<%= __('Loading...') %>",
            loadingData: "<%= __('Loading data...') %>",
            notEnoughData: "<%= __('Not enough data') %>",
            noDataFor24h: "<%= __('No data for the last 24 hours.') %>",
            loadingError: "<%= __('Loading error.') %>",
            noDataFromSensors: "<%= __('No data from active sensors.') %>",
            geolocationError: "<%= __('Geolocation error:') %>",
            errorLoadingHistory: "<%= __('Error loading history:') %>",
            errorLoadingData: "<%= __('Error loading data:') %>",
            failedToSaveLocation: "<%= __('Failed to save location:') %>",
            type: "<%= __('Type:') %>",
            status: "<%= __('Status:') %>",
            unknown: "<%= __('Unknown') %>",
            updated: "<%= __('Updated:') %>",
            good: "<%= __('Good') %>",
            moderate: "<%= __('Moderate') %>",
            poor: "<%= __('Poor') %>",
            co2Level: "<%= __('CO₂ Level (ppm)') %>",
            pm25Particles: "<%= __('PM2.5 Particles (µg/m³)') %>",
            so2Level: "<%= __('SO₂ Level (µg/m³)') %>",
            waterTemp: "<%= __('Water Temperature (°C)') %>",
            acidity: "<%= __('Acidity (pH)') %>",
            noiseLevel: "<%= __('Noise Level (dB)') %>"
        };
    </script>
    
    <script>
    document.addEventListener('DOMContentLoaded', async () => {
        const mainElement = document.querySelector('.system-main');
        const user = JSON.parse(mainElement.dataset.user);
        const nearestSensorInfo = document.getElementById('nearest-sensor-info');
        const bestPerformersList = document.getElementById('best-performers');
        const worstPerformersList = document.getElementById('worst-performers');
        let allSensors = [];
        let map;
        let charts = {};

        const createIcon = (color) => new L.Icon({ iconUrl: `https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-${color}.png`, shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png', iconSize: [25, 41], iconAnchor: [12, 41], popupAnchor: [1, -34], shadowSize: [41, 41] });
        const greenIcon = createIcon('green'), yellowIcon = createIcon('gold'), redIcon = createIcon('red'), greyIcon = createIcon('grey');
        
        // Функція тепер перевіряє тільки англійські ключі
        const getIconByStatus = (status) => { 
            const s = status ? status.toLowerCase() : 'unknown'; 
            if (s === 'good') return greenIcon; 
            if (s === 'moderate') return yellowIcon; 
            if (s === 'poor') return redIcon; 
            return greyIcon; 
        };

        function getDistance(lat1, lon1, lat2, lon2) { const R = 6371; const dLat = (lat2 - lat1) * Math.PI / 180; const dLon = (lon2 - lon1) * Math.PI / 180; const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2); const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); return R * c; };
        async function saveLocation(latitude, longitude) { try { await fetch('/api/update-location', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ latitude, longitude }) }); } catch (error) { console.error(pageTranslations.failedToSaveLocation, error); } }

        function updateLeaderboards(sensors) {
            const airSensors = sensors.filter(s => s.sensor_type.toLowerCase() === 'air' && s.data_values?.pm25 != null);
            if (airSensors.length < 3) { bestPerformersList.innerHTML = `<li>${pageTranslations.notEnoughData}</li>`; worstPerformersList.innerHTML = `<li>${pageTranslations.notEnoughData}</li>`; return; };
            const sortedSensors = [...airSensors].sort((a, b) => a.data_values.pm25 - b.data_values.pm25);
            const best = sortedSensors.slice(0, 3);
            const worst = sortedSensors.slice(-3).reverse();
            bestPerformersList.innerHTML = best.map(s => `<li>${s.sensor_name} <span>(${s.data_values.pm25} µg/m³)</span></li>`).join('');
            worstPerformersList.innerHTML = worst.map(s => `<li>${s.sensor_name} <span>(${s.data_values.pm25} µg/m³)</span></li>`).join('');
        }
        
        function renderHistoryChart(historyData, metricKey) {
            const data = { labels: historyData.map(d => new Date(d.timestamp)), datasets: [{ label: metricKey.toUpperCase(), data: historyData.map(d => d.data_values ? (d.data_values[metricKey] || null) : null), borderColor: '#3498db', backgroundColor: 'rgba(52, 152, 219, 0.2)', tension: 0.1, fill: true }] };
            const ctx = document.getElementById('historyChart')?.getContext('2d');
            if (!ctx) return;
            if (charts.historyChart) charts.historyChart.destroy();
            charts.historyChart = new Chart(ctx, { type: 'line', data: data, options: { responsive: true, maintainAspectRatio: false, scales: { x: { type: 'time', time: { unit: 'hour', displayFormats: { hour: 'HH:mm' } } } }, plugins: { legend: { display: false } } } });
        }

        async function createHistoryChart(sensor) {
            const controlsContainer = document.getElementById('historyControls');
            const chartContainer = document.querySelector('#historyChart').parentElement;
            controlsContainer.innerHTML = pageTranslations.loading;
            if (!sensor) { controlsContainer.innerHTML = ''; chartContainer.style.display = 'none'; return; }
            try {
                const response = await fetch(`/api/sensors/${sensor.sensor_id}/history`);
                const historyData = await response.json();
                if (historyData.length === 0) { controlsContainer.innerHTML = pageTranslations.noDataFor24h; chartContainer.style.display = 'none'; return; }
                chartContainer.style.display = 'block';
                const availableKeys = Object.keys(historyData[0].data_values).filter(key => historyData.some(d => d.data_values[key] !== null));
                controlsContainer.innerHTML = availableKeys.map(key => `<button data-metric="${key}">${key.toUpperCase()}</button>`).join('');
                controlsContainer.querySelectorAll('button').forEach(button => { button.addEventListener('click', () => { controlsContainer.querySelector('button.active')?.classList.remove('active'); button.classList.add('active'); renderHistoryChart(historyData, button.dataset.metric); }); });
                if (controlsContainer.firstChild) { controlsContainer.firstChild.click(); }
            } catch (error) { console.error(pageTranslations.errorLoadingHistory, error); controlsContainer.innerHTML = pageTranslations.loadingError; chartContainer.style.display = 'none'; }
        }
        
        function updateUI(nearest) {
            const statusText = nearest.status ? (pageTranslations[nearest.status.toLowerCase()] || pageTranslations.unknown) : pageTranslations.unknown;
            let sensorHtml = `<h4>${nearest.sensor_name}</h4><p><strong>${pageTranslations.type}</strong> ${nearest.sensor_type}</p><p><strong>${pageTranslations.status}</strong> <span class="status-${(nearest.status || 'unknown').toLowerCase()}">${statusText}</span></p>`;
            if (nearest.data_values) for (const [key, value] of Object.entries(nearest.data_values)) { if(value !== null) sensorHtml += `<p><strong>${key.charAt(0).toUpperCase() + key.slice(1)}:</strong> ${value}</p>`; } 
            sensorHtml += `<p><small>${pageTranslations.updated} ${new Date(nearest.last_updated).toLocaleString()}</small></p>`;
            nearestSensorInfo.innerHTML = sensorHtml;
            if (!map) { map = L.map('mini-map').setView([nearest.latitude, nearest.longitude], 13); L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map); allSensors.forEach(s => L.marker([s.latitude, s.longitude], { icon: getIconByStatus(s.status) }).addTo(map).bindPopup(`<b>${s.sensor_name}</b>`)); const pulseIcon = L.divIcon({className: 'pulse', iconSize: [20, 20]}); L.marker([nearest.latitude, nearest.longitude], {icon: pulseIcon}).addTo(map); } else { map.setView([nearest.latitude, nearest.longitude], 13); }
            createHistoryChart(nearest);
        }
        
        function updateCharts(sensors) {
            const createChart = (canvasId, data, options) => {
                const ctx = document.getElementById(canvasId)?.getContext('2d');
                if (!ctx) return;
                if (charts[canvasId]) charts[canvasId].destroy();
                charts[canvasId] = new Chart(ctx, { type: 'bar', data: data, options: { indexAxis: 'y', responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false }, title: { display: true, text: options.title } }, scales: { x: { ticks: { callback: function(value) { return value + (options.unit || '') } } } } } });
            };
            const airSensors = sensors.filter(s => s.sensor_type.toLowerCase() === 'air' && s.data_values);
            const waterSensors = sensors.filter(s => s.sensor_type.toLowerCase() === 'water' && s.data_values);
            const noiseSensors = sensors.filter(s => s.sensor_type.toLowerCase() === 'noise' && s.data_values);
            if (airSensors.length > 0) { createChart('co2Chart', { labels: airSensors.map(s => s.sensor_name), datasets: [{ data: airSensors.map(s => s.data_values.co2 || 0), backgroundColor: '#ff6384' }] }, { title: pageTranslations.co2Level, unit: ' ppm' }); createChart('pm25Chart', { labels: airSensors.map(s => s.sensor_name), datasets: [{ data: airSensors.map(s => s.data_values.pm25 || 0), backgroundColor: '#36a2eb' }] }, { title: pageTranslations.pm25Particles, unit: ' µg/m³' }); createChart('so2Chart', { labels: airSensors.map(s => s.sensor_name), datasets: [{ data: airSensors.map(s => s.data_values.so2 || 0), backgroundColor: '#cc65fe' }] }, { title: pageTranslations.so2Level, unit: ' µg/m³' }); }
            if (waterSensors.length > 0) { createChart('tempChart', { labels: waterSensors.map(s => s.sensor_name), datasets: [{ data: waterSensors.map(s => s.data_values.temperature || 0), backgroundColor: '#4bc0c0' }] }, { title: pageTranslations.waterTemp, unit: '°C' }); createChart('acidityChart', { labels: waterSensors.map(s => s.sensor_name), datasets: [{ data: waterSensors.map(s => s.data_values.ph || 0), backgroundColor: '#ff9f40' }] }, { title: pageTranslations.acidity, unit: ' pH' }); }
            if (noiseSensors.length > 0) { createChart('noiseChart', { labels: noiseSensors.map(s => s.sensor_name), datasets: [{ data: noiseSensors.map(s => s.data_values.db_level || 0), backgroundColor: '#ffcd56' }] }, { title: pageTranslations.noiseLevel, unit: ' dB' }); }
        }

        async function main() {
            try {
                const response = await fetch('/api/sensors-with-latest-readings');
                allSensors = await response.json();
                if (!allSensors || allSensors.length === 0) { document.body.innerHTML = `<h1>${pageTranslations.noDataFromSensors}</h1>`; return; }
                updateCharts(allSensors);
                updateLeaderboards(allSensors);
                if (user.latitude && user.longitude) { processDataForLocation(user.latitude, user.longitude); } else { navigator.geolocation.getCurrentPosition( (position) => { const { latitude, longitude } = position.coords; processDataForLocation(latitude, longitude); saveLocation(latitude, longitude); }, (error) => { console.error(pageTranslations.geolocationError, error); updateUI(allSensors[0]); } ); }
            } catch (error) { console.error(pageTranslations.errorLoadingData, error); }
        }
        
        function processDataForLocation(latitude, longitude) {
            let nearestSensor = null; let minDistance = Infinity;
            allSensors.forEach(sensor => { const distance = getDistance(latitude, longitude, sensor.latitude, sensor.longitude); if (distance < minDistance) { minDistance = distance; nearestSensor = sensor; } });
            if (nearestSensor) { updateUI(nearestSensor); } else { updateUI(allSensors[0]); }
        }

        main();
    });
    </script>
</body>
</html>