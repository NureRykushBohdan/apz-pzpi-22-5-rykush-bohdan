Міністерство освіти і науки України



Харківський національний університет радіоелектроніки

Кафедра програмної інженерії




Лабораторна робота №2
з дисципліни “ Архітектура програмного забезпечення”





Виконала:                                                                            Перевірив:
Студент ПЗПІ-22-5                                                         Дашенков Д.С.
Рикуш Богдан















2025
Лабораторна робота №2

Мета: Розробка мобільного програмного застосунку

Хід роботи

1. Розроблено архітектурні діаграми системи:
Use Case Diagram – для опису загальної функціональності та взаємодії користувача з системою (див. Додаток А).
Component Diagram – для візуалізації основних компонентів програмного забезпечення та зв'язків між ними (див. Додаток Б).
State Diagram – для моделювання зміни станів ключових об'єктів, наприклад, сесії користувача або стану датчика (див. Додаток В).
ER-діаграма – для проєктування реляційної структури бази даних PostgreSQL (див. Додаток Г).
2. Розроблено клієнт-серверний застосунок:
Бекенд реалізовано на платформі Node.js з використанням фреймворку Express.js. Сервер забезпечує RESTful API виводу  датчикаів та їх показниками, використовуючи базу даних PostgreSQL. Авторизація реалізована через сесії, що зберігаються в базі даних.
Фронтенд (мобільний застосунок) розроблено на мові Kotlin для платформи Android. Архітектура додатку відповідає патерну MVVM (Model-View-ViewModel). Інтерфейс користувача побудовано за допомогою декларативного фреймворку Jetpack Compose. Для мережевої взаємодії з сервером використано бібліотеку Retrofit, а для асинхронних операцій — Kotlin Coroutines.
3. Здійснено повну інтеграцію між клієнтом та сервером, що включає наступний функціонал:
Авторизація та сесія: Реалізовано вхід користувача в систему зі збереженням сесії, що дозволяє не вводити дані повторно при перезапуску додатку.
Робота з геолокацією: Додаток отримує GPS-координати користувача та на їх основі визначає найближчий датчик моніторингу.
Візуалізація даних:
Відображення детальної інформації та останніх показників з найближчого датчика.
Побудова динамічних графіків для всіх типів історичних даних (температура, CO2 тощо) з коректним відображенням часової шкали.
Відображення всіх активних датчиків у вигляді маркерів на інтерактивній карті Google Maps.
Інтерактивність та фонові задачі:
Реалізовано сканування QR-кодів за допомогою камери пристрою (CameraX та ML Kit) для швидкого пошуку датчика за його координатами.
Налаштовано фонове завдання (WorkManager) для періодичної перевірки даних та відправки push-сповіщень користувачеві при перевищенні встановлених порогових значень.
Репозиторій у Github: https://github.com/NureRykushBohdan/apz-pzpi-22-5-rykush-bohdan/tree/main/Lab2
Висновок:
У процесі виконання лабораторної роботи було створено повноцінний прототип мобільного додатку для моніторингу показників навколишнього середовища. Було реалізовано клієнт-серверу архітектуру з використанням сучасного стеку технологій: Node.js/Express для серверної частини та Kotlin/Jetpack Compose для мобільного клієнта.
Результати роботи демонструють ефективну інтеграцію та реалізацію складного функціоналу, такого як робота з геолокацією, візуалізація даних на картах і графіках, фонові завдання та розпізнавання QR-кодів. Це підтверджує коректність обраної архітектури та технологій для вирішення поставлених завдань.

ДОДАТОК А
Use Case Diagram

@startuml
left to right direction


actor "Зареєстрований користувач" as User


rectangle "Cистеми моніторингу екологічного стану місцевості" {
  usecase "Вхід в систему" as UC2
  usecase "Вихід з системи" as UC1
  usecase "Перегляд панелі моніторингу" as UC4
  usecase "Перегляд карти датчиків" as UC5
  usecase "Сканування QR-коду" as UC6
  usecase "Отримання сповіщень" as UC7

}


User --> UC1
User --> UC2
User --> UC4
User --> UC5
User --> UC6
User --> UC7
@enduml

ДОДАТОК Б

Component Diagram

@startuml
!theme vibrant

title Component Diagram

node "Мобільний застосунок (Android)" {
  [UI (Jetpack Compose)] as UI
  [ViewModel (MVVM)] as VM
  [Data Layer] as Data
  [Background Worker (WorkManager)] as BGWorker

  package "Апаратні та системні сервіси" {
    [CameraX / ML Kit] as Camera
    [Google Maps SDK] as MapsSDK
    [Location Services] as GPS
    [Notification Service] as NotifService
  }

  UI --> VM
  VM --> Data
  Data --> [Retrofit]
  BGWorker --> Data
  
  UI ..> MapsSDK : (Відображення карти)
  UI ..> Camera : (QR-сканер)
  VM ..> GPS : (Запит геолокації)
  BGWorker ..> NotifService : (Показ сповіщень)
}

node "Серверна інфраструктура (Node.js)" {
  [Web Server (Express.js)] as Server
  () "REST API" as API
  [DB Interface (node-postgres)] as DBInterface
  [Auth Logic (bcrypt, session)] as Auth


  Server -left- API
  Server --> Auth
  Server --> DBInterface
  Server --> Uploader
}

cloud "Зовнішні хмарні сервіси" {

  [Google Maps Platform] as MapsAPI

}

database "База даних" {
  [PostgreSQL] as PGSQL
}

' --- Зв'язки між основними вузлами ---
Retrofit ..> API : (HTTP/S запити)
MapsSDK ..> MapsAPI : (Завантаження тайлів мапи)


DBInterface --> PGSQL : (SQL запити)

@enduml

ДОДАТОК В

State Diagram


@startuml
title State Diagram:


state "ПочатковаПеревірка"    as ПК
state "Аутентифікація"         as АУ
state "ЗавантаженняДаних"      as ЗД
state "СтанПомилки"            as СП
state "ГоловнийЕкран"          as ГЕ
state "СкануванняQR"           as СК
state "ДеталіДатчика"          as ДД

state "Вкладка 'Головна'"      as NearestSensorView
state "Вкладка 'Карта'"        as MapView


[*] --> ПК


state ПК {
  note right
    Перевірка збереженої сесії
    в PersistentCookieJar
  end note
}
ПК --> АУ  : [Немає сесії]
ПК --> ЗД  : [Сесія існує]


state АУ {
  note left
    Екран входу / реєстрації
  end note
}
АУ --> ЗД  : Успішний вхід


state ЗД {
  note right
    Отримання геолокації,
    завантаження даних з сервера
  end note
}
ЗД --> NearestSensorView : Дані успішно завантажено
ЗД --> СП               : Помилка завантаження


state ГЕ {
  NearestSensorView -right-> MapView : Натиснуто "Карта"
  MapView           -left->  NearestSensorView : Натиснуто "Головна"
}


ГЕ --> СК   : Натиснуто "Сканувати"
СК  --> ГЕ   : Скасування
СК  --> ДД   : QR-код відскановано
ДД  --> ГЕ   : Закрити деталі


ГЕ --> АУ   : Вихід з системи (Logout)
СП  -down-> АУ   : Спробувати знову / Вийти


АУ --> [*] : Закрити додаток
ГЕ --> [*] : Закрити додаток
СП  --> [*] : Закрити додаток

@enduml



ДОДАТОК Г

ER-діаграма















