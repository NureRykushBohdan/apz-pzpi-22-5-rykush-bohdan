Міністерство освіти і науки України



Харківський національний університет радіоелектроніки

Кафедра програмної інженерії




Лабораторна робота №4
з дисципліни “ Архітектура програмного забезпечення”





Виконала:                                                                            Перевірив:
Студент ПЗПІ-22-5                                                         Дашенков Д.С.
Рикуш Богдан















2025
Мета роботи:
Ознайомитись із підходами до масштабування бекенд-системи, реалізувати один із варіантів та продемонструвати його ефективність. Провести навантажувальне тестування для оцінки впливу масштабування на продуктивність системи.
Хід роботи:
1. Вибір стратегії та інструментів
Для виконання лабораторної роботи було обрано горизонтальне масштабування Node.js застосунку. Ця стратегія передбачає запуск кількох ідентичних копій (реплік) сервера, що дозволяє розподіляти навантаження та підвищувати відмовостійкість.
Основні інструменти:
Docker: для контейнеризації застосунку та створення портативного образу.
Kubernetes (через Docker Desktop): для оркестрації контейнерів, автоматизації розгортання та масштабування.
DigitalOcean Managed Database: для використання зовнішньої, надійної бази даних PostgreSQL.
Locust: для проведення навантажувального тестування та вимірювання продуктивності.
2. Підготовка та розгортання
Контейнеризація: Було створено Dockerfile для пакування Node.js застосунку. Образ був успішно зібраний та завантажений до Docker Hub під іменем nenikk/apz-lab-backend:latest.
Налаштування Kubernetes: Створено маніфест backend-deployment.yaml, який описує розгортання застосунку в локальному Kubernetes кластері. У маніфесті було прописано підключення до зовнішньої бази даних на DigitalOcean.
Деплой: Застосунок було успішно розгорнуто в Kubernetes.
Команда kubectl get pods підтвердила, що под backend-deployment-... знаходиться у статусі Running.
Команда kubectl get service backend-service показала, що сервіс типу LoadBalancer успішно створений і доступний за адресою http://localhost.
 Приклад виводу команди kubectl get pods



3. Демонстрація масштабування
Процес масштабування було продемонстровано за допомогою команди kubectl scale.
При виконанні kubectl scale deployment backend-deployment --replicas=3 кластер успішно створив дві додаткові репліки застосунку.
При виконанні kubectl scale deployment backend-deployment --replicas=1 кластер коректно видалив зайві поди, повернувши систему до початкового стану.

Це підтвердило, що Kubernetes коректно керує життєвим циклом застосунку та дозволяє динамічно змінювати кількість робочих копій.
Навантажувальне тестування
Для тестування було використано інструмент Locust. Тест імітував одночасну спробу входу в систему 50 користувачів (spawn rate: 5 користувачів/сек), які надсилали POST-запити на ендпоінт /login.
Результати тестування з 1 реплікою сервера
Кількість запитів: 12,368
Кількість помилок: 0 (0%)
Продуктивність (RPS): 15.7 запитів/секунду
Середній час відповіді: 1175 мс
Результати тестування з 3 репліками сервера 

Кількість запитів (за той самий час): ~18,000
Кількість помилок: 108 (0.92%)
Продуктивність (RPS): ~21.7 запитів/секунду
Середній час відповіді: ~297 мс





Аналіз результатів
Показник
1 репліка
3 репліки
Зміна
RPS (Запити/сек)
15.7
21.7
+38%
Середній час відповіді
1175 мс
~297 мс
-75%
Помилки
0%
0.92%
+0.92%

Як видно з таблиці, збільшення кількості реплік сервера з однієї до трьох дозволило:
Підвищити пропускну здатність системи (RPS) на 38%. Це означає, що система змогла обробляти більше запитів за той самий час.
Суттєво зменшити середній час відповіді на 75%, оскільки навантаження ефективно розподіляється між декількома екземплярами застосунку.
Важливим спостереженням є поява невеликої кількості помилок (0.92%) при трьох репліках. Це класичний результат навантажувального тестування, який вказує на те, що ми знайшли нове "вузьке місце" системи. Хоча сам бекенд було успішно масштабовано, тепер вузьким місцем, найімовірніше, стала база даних, яка не змогла впоратись з різко збільшеною кількістю одночасних підключень та запитів від трьох копій сервера.
На підтвердження цього можна подивитися навантаженні бд на хостингу 

База даних стоїть на слабкому хостингу для тестування який не справляється с запросами.
Висновок
У ході виконання лабораторної роботи було успішно реалізовано горизонтальне масштабування Node.js застосунку за допомогою Docker та Kubernetes. Проведене навантажувальне тестування наочно продемонструвало, що збільшення кількості реплік сервера підвищує продуктивність системи (збільшення RPS та зменшення часу відповіді).
Водночас тест виявив потенційне вузьке місце системи — базу даних, яка стає перевантаженою при подальшому масштабуванні бекенду. Це доводить, що масштабування є комплексним процесом, який вимагає аналізу всіх компонентів системи.









