ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмної інженерії»

ЗВІТ

З практичної роботи №2

з дисципліни “Архітектура програмного забезпечення”

на тему «Архітектура відомих програмних систем»

Виконав: ст. гр. ПЗПІ-22-5, Рикуш Богдан

Перевірив: ст. викл. кафедри ПІ, Сокорчук І. П.

ХАРКІВ 2025



 1. ІСТОРІЯ ЗМІН

| № | Дата | Версія звіту | Опис змін та виправлень |
| 1 | 07.06.2025 | 1.0 | Створено звіт з усіма розділами та додатками |



 2. ЗАВДАННЯ

У межах даної роботи необхідно підготувати доповідь про архітектуру однієї з відомих складних програмних систем.



 3. ОПИС ВИКОНАНОЇ РОБОТИ

У межах даної роботи було обрано для аналізу архітектуру месенджера «Telegram». Це глобально розподілена система обміну повідомленнями, відома своєю швидкістю, безпекою та масштабованістю.

Було досліджено ключові компоненти системи: клієнтські застосунки для різних платформ, архітектуру бекенду, яка поєднує мікросервісний підхід з високопродуктивними монолітними модулями, а також системи зберігання даних. Особливу увагу було приділено власному протоколу передачі даних MTProto, який є основою безпеки та швидкості платформи.

Проаналізовано підходи Telegram до масштабованості, зокрема використання географічно розподілених дата-центрів (DC), горизонтального масштабування та мережі доставки контенту (CDN). Також було розглянуто механізми забезпечення безпеки, включаючи два рівні шифрування (клієнт-серверне та наскрізне).



 4. ВИСНОВКИ

У ході виконання цієї практичної роботи було детально вивчено архітектуру месенджера «Telegram», його ключові технологічні рішення та принципи роботи.

Завдяки виконанню цієї роботи вдалося поглибити знання про побудову високонавантажених, географічно розподілених систем. Аналіз Telegram показав ефективність використання власного пропрієтарного протоколу (MTProto) для досягнення високих показників швидкості та безпеки, а також гібридного підходу до архітектури, що поєднує переваги мікросервісів та оптимізованих монолітів.




 ДОДАТОК А

# Посилання на відеозапис доповіді та текст хронологічного опису доповіді

Відеозапис доповіді на YouTube: https://youtu.be/h-fTG_tO1fg

Хронологічний опис відео:

00:00 - 00:07 | Титульний слайд. Представлення теми: "Архітектура месенджера Telegram". Представлення виконавця: "студент ПЗПІ 22-5 Рикуш Богдан".

00:07 - 00:30 | Слайд "Вступ та мета". Оголошення мети доповіді: розглянути внутрішню побудову Telegram. Пояснення важливості теми: Telegram як приклад масштабного та надійного месенджера для розробників.

00:30 - 00:55 | Слайд "Історія, засновники". Коротка історія заснування у 2013 році братами Дуровими. Основна ціль: створення безпечної та незалежної платформи. Згадка про штаб-квартиру та ключову особливість — протокол MTProto.

00:55 - 1:14 | Слайд "Загальна архітектура". Опис гібридного підходу: високопродуктивна мікросервісна архітектура з монолітними елементами для оптимізації швидкості.

1:14 - 1:36 | (Додаткова візуалізація або розширення попереднього слайду). Пояснення клієнт-серверної моделі з компонентами: сервери обробки повідомлень, авторизації, зберігання. Згадка про протокол MTProto.

1:36 - 1:58 | Слайд "Основні принципи архітектури". Перелік ключових принципів: швидкість, масштабованість, надійність, безпека та децентралізація (кілька дата-центрів).

1:58 - 2:18 | Слайд "Фронтенд". Огляд клієнтських застосунків (iOS, Android, Desktop, Web) та їхніх технологій. Перелік основних функцій та особливостей (асинхронна обробка, кешування).

2:18 - 2:39 | Слайд "Бекенд". Опис серверної частини: мови розробки (C++, Java), використання MTProto, географічний розподіл на кластери (DC). Перелік компонентів бекенду.

2:39 - 3:06 | Слайд "Бази даних". Опис типів даних, що зберігаються. Згадка про власну K-V базу та використання PostgreSQL/SQLite для кешів. Пояснення особливостей: реплікація, шардинг, шифрування.

3:06 - 3:26 | Слайд "Інфраструктура та масштабованість". Пояснення глобальної інфраструктури, принципу розподілу користувачів по дата-центрах, горизонтального масштабування та ролі CDN.

3:26 - 3:45 | Слайд "Обробка великих даних". Короткий огляд механізмів обробки подій, логування, аналітики для боротьби зі зловживаннями та оптимізації зберігання історії.

3:45 - 4:05 | Слайд "Безпека та конфіденційність". Деталі про протокол MTProto, два рівні шифрування (клієнт-сервер та end-to-end), двофакторну автентифікацію та інші функції безпеки.

4:05 - 4:26 | Слайд "Висновки". Підсумок: Telegram як складна, розподілена система. Роль власної інфраструктури та протоколу. Погляд на перспективи: AI-боти, розширення функціоналу.

4:26 - 4:30 | Слайд "Дякую за увагу!". Завершення доповіді.



 ДОДАТОК Б

 Слайди презентації доповіді:

Рисунок Б.1 – Титульний слайд
> Архітектура месенджера Telegram
> Виконав: студ. ПЗПІ-22-5, Рикуш Богдан

Рисунок Б.2 – Вступ та мета
> Мета: Розглянути, як побудована система Telegram зсередини: від клієнтів до серверів, обробки даних, масштабованості та безпеки.
> Чому це важливо: Telegram є одним із наймасштабніших та найнадійніших месенджерів у світі — зрозуміти його архітектуру корисно для розробників, DevOps та аналітиків.

Рисунок Б.3 – Історія, засновники
> Засновано: 2013 року братами Павлом та Миколою Дуровими.
> Ціль: Безпечна, швидка та незалежна платформа обміну повідомленнями.
> Штаб-квартира: Дубай (раніше — Берлін, Лондон).
> Особливість: Власний протокол передачі даних — MTProto.

Рисунок Б.4 – Загальна архітектура
> Telegram використовує високопродуктивну мікросервісну архітектуру, де деякі критичні сервіси реалізовані як ефективні модулі, що мають ознаки монолітів — з метою оптимізації швидкості та продуктивності.

Рисунок Б.5 – Основні принципи архітектури
> - Швидкість — миттєва доставка повідомлень
> - Масштабованість — підтримка сотень мільйонів користувачів
> - Надійність — резервування, автоматичне перемикання вузлів
> - Безпека — наскрізне шифрування, клієнт-серверне шифрування
> - Децентралізація — кілька дата-центрів у різних регіонах

Рисунок Б.6 – Фронтенд
> Клієнтські застосунки:
> - Telegram iOS (Swift/Obj-C)
> - Telegram Android (Java/Kotlin)
> - Telegram Desktop (C++/Qt)
> - Telegram Web (JavaScript/React)
> Функції: чат, дзвінки, канали, боти, медіа
> Особливості: асинхронна обробка, кешування, мультісесійність

Рисунок Б.7 – Бекенд
> Сервери Telegram:
> - Написані на C++ та Java
> - Використовують MTProto для обміну даними
> - Поділені на кластери за географічною ознакою
> Компоненти:
> - DC (Data Center) сервери
> - Сервери авторизації
> - Сервери обробки повідомлень
> - CDN для доставки медіа

Рисунок Б.8 – Бази даних
> Типи даних: метадані повідомлень, медіа, акаунти, сесії
> Системи зберігання:
> - Власна високопродуктивна база (sharded key-value storage)
> - PostgreSQL / SQLite (локальні кеші)
> Особливості:
> - Реплікація і шардинг
> - Зашифроване зберігання
> - Бекапи і логування

Рисунок Б.9 – Інфраструктура та масштабованість
> - Глобальна інфраструктура: десятки дата-центрів по світу
> - DC-розподіл: кожен користувач прив’язаний до DC
> - Horizontal scaling: автоматичне додавання вузлів
> - Load balancing: інтелектуальний розподіл трафіку
> - CDN-сервери: для кешування фото, відео, файлів

Рисунок Б.10 – Обробка великих даних
> - Обробка подій у реальному часі
> - Логування активності: для аналітики, спаму, ботів
> - Аналітика: big data-пайплайни для виявлення зловживань
> - Зберігання історії чатів: оптимізоване, стиснене

Рисунок Б.11 – Безпека та конфіденційність
> - MTProto: власний шифрувальний протокол
> - Два рівні шифрування:
>     - Клієнт-сервер: звичайні чати
>     - End-to-end: секретні чати
> - Двофакторна автентифікація
> - Самознищення повідомлень, анонімні акаунти, бот-фільтрація

Рисунок Б.12 – Висновки
> - Telegram — складна, розподілена та масштабована система.
> - Власна інфраструктура та протокол забезпечують високу швидкість і безпеку.
> - Є прикладом ефективної реалізації великого месенджера з глобальним покриттям.
> - Перспективи: AI-боти, розширення функцій, більша децентралізація.

Рисунок Б.13 – Подяка
> ДЯКУЮ ЗА УВАГУ!